#!/depot/Python/Python-3.8.0/bin/python -E

import re
import subprocess
import os
import sys
import getopt
import getpass
import shutil
import datetime
from colorama import Fore
import pathlib
cwd = os.getcwd()
check = False
mainspf = ""
user = getpass.getuser()


# ---------------------------------- #
bindir = str(pathlib.Path(__file__).resolve().parent)
# Add path to library that may be symbolically linked.
sys.path.append(bindir + '/../lib/Util')
# Add path to sharedlib's Python Utilities directory.
sys.path.append(bindir + '/../lib/python/Util')
# ---------------------------------- #
from Misc import utils__script_usage_statistics, get_release_version
__version__ = get_release_version(bindir)


try:
    opts,args = getopt.getopt(sys.argv[1:],"h",["help"])
except getopt.GetoptError:
    sys.exit(2)

track = open("/u/dikshant/bin/tracker.txt",'a')
track.write("-I- {} called by {} at {}\n".format(__file__,user,datetime.datetime.now()))
if opts:
    for opt,arg in opts:
        if opt in ('-h','--help'):
            print(Fore.GREEN + "-I- This script is an auxillary script that helps you to cleanup the report directory in a project disk")
            print(Fore.GREEN + "-I- The script is to be run in ../xml_data/<macro> directory.")
            print(Fore.GREEN + "-I- It will automatically search for .spf.gz files in .../xml_data/<macro>/<TestBench> directories and will grep the Date of creation from them\n-I- It will then copy spf.gz files to <macro> directory with the unique TimeStamp added with the name")
            print(Fore.GREEN + "-I- After creating the spf.gz files, It will create a link of spf.gz file in TestBench directory. The Link will be created in accordance to the timestamp of original spf.gz file under Testbench directory")
            sys.exit(2)


def main():
    log = open("cleanup.log",'w')
    print("-I- Log file generated by {}. Ran by user {}\n".format(sys.argv[0],user))
    log.write("-I- Log file generated by {}. Ran by user {}\n".format(sys.argv[0],user))
    track.write("-I- Log file generate at {}/cleanup.log\n".format(cwd))
    track.close()

    date = {}
    for path, subdirs, files in os.walk(cwd):
        for name in files:
            if re.search(r'spf',name):
                filepath = os.path.join(path, name)
                filename = os.path.basename(filepath)
                tb = os.path.basename(path)
                if os.path.isfile(filepath) is True and os.path.islink(filepath) is False:
                    op = (subprocess.Popen(['zgrep','-e','^*|DATE',filepath],stdout=subprocess.PIPE,stderr=subprocess.PIPE).communicate())[0].strip().decode('utf-8')
                    op = re.search(r'DATE\s+\"(.+)\"',op).group(1)
                    op = re.sub(r'\s+',"_",op)
                    op = re.sub(r':',"",op)
                    if op in date.values():
                        lnk = filename.split('.')
                        lnk = lnk[0] + "_" + op + ".spf.gz"
                        lnk = cwd + "/" + lnk
                        print("-I- Removing {} file from {}\n".format(filename,os.path.basename(path)))
                        log.write("-I- Removing {} file from {}\n".format(filename,os.path.basename(path)))
                        os.remove(filepath)
                        print("-I- Creating symlink of {} in {}\n".format(filename,os.path.basename(path)))
                        log.write("-I- Creating symlink of {} in {}\n".format(filename,os.path.basename(path)))
                        os.symlink(lnk,filepath)
                    else:
                        date[tb] = op
                        spfname = filename.split('.')
                        spfname = spfname[0] + "_" + op + ".spf.gz"
                        spfpath = cwd + "/" + spfname
                        print("-I- Copy {} file to macro directory\n".format(spfname))
                        log.write("-I- Copy {} file to macro directory\n".format(spfname))

                        if os.path.isfile(spfpath) is False:
                            shutil.copyfile(filepath,cwd + "/" + spfname)
                        print("-I- Removing {} file from {}\n".format(filename,os.path.basename(path)))
                        log.write("-I- Removing {} file from {}\n".format(filename,os.path.basename(path)))
                        os.remove(filepath)
                        print("-I- Creating symlink of {} in {}\n".format(filename,os.path.basename(path)))
                        log.write("-I- Creating symlink of {} in {}\n".format(filename,os.path.basename(path)))
                        os.symlink(spfpath,filepath)

    print("-I- Cleanup Done.")
    log.write("-I- Cleanup Done.")
    log.close()


if __name__ == '__main__':
    main()
    utils__script_usage_statistics(__file__,__version__)
