#!/depot/perl-5.14.2/bin/perl
use strict;
use warnings;
use Pod::Usage;
use Data::Dumper;
use File::Copy;
use Getopt::Std;
use Getopt::Long;
use File::Basename qw( dirname );
use File::Spec::Functions qw( catfile );
use Cwd     qw( abs_path );
use Carp    qw( cluck confess croak );
use FindBin qw( $RealBin $RealScript );
use Cwd;

use lib "$RealBin/../lib/perl/";
use Util::CommonHeader;
use Util::Misc;
use Util::Messaging;

#--------------------------------------------------------------------#
#our $STDOUT_LOG  = undef;     # undef       : Log msg to var => OFF
our $STDOUT_LOG   = EMPTY_STR; # Empty String: Log msg to var => ON
our $DEBUG        = NONE;
our $VERBOSITY    = NONE;
our $PROGRAM_NAME = $RealScript;
our $VERSION      = get_release_version() || 2022.11;
our $LOGFILENAME  = getcwd(). "/$PROGRAM_NAME.log";
#--------------------------------------------------------------------#

use Capture::Tiny qw/capture/;
use File::Basename qw(dirname basename);
use FindBin qw($RealBin $RealScript);

BEGIN { our $AUTHOR='IN08 Timing team'; header(); } 
&Main();
END {
   write_stdout_log( $LOGFILENAME );
   local $?;   ## adding this will pass the status of failure if the script
               ## does not compile; otherwise this will always return 0
   footer(); 
}



sub Main {
    utils__script_usage_statistics( $RealScript, $VERSION);
    my ($cell, @cell, %coefficient, $derate_type, $line, $match, $rf_type, $unit);

    $unit = shift @ARGV;


    hprint("$unit-\n");
    foreach my $file (@ARGV) {
	my @LVF = read_file($file);
    foreach my $line (@LVF) {
        if ($line =~ /ocvm_type\s*:\s*(.*)/) {$derate_type=$rf_type=$cell = "";}
         elsif ($line =~ /object_spec\s*:\s*(.*)/) {$cell = $1;$cell =~ s/ |\t//g;$cell =~ s/\//\./g; $match = "";foreach(@cell){if($_ eq $cell) {$match = "true";last;}}if($match eq "") {push (@cell,$cell);}}
         elsif ($line =~ /rf_type\s*:\s*(.*)/) 	{$rf_type = $1; $rf_type =~ s/ |\t//g;}
         elsif ($line =~ /derate_type\s*:\s*(.*)/) {$derate_type = $1; $derate_type =~ s/ |\t//g;}
         elsif ($line =~ /coefficient\s*:\s*(.*)/) {$coefficient{$cell}{$rf_type}{$derate_type} = $1; $coefficient{$cell}{$rf_type}{$derate_type} =~ s/ |\t//g;}

     }
    }



    #open (my $VAR,">>", "set_libcell_variation.tcl") || die "cannot write to set_libcell_variation.tcl\n";
	my @VAR;

    foreach my $cell (@cell) {
    if($cell =~ /\.(.*)/) {push @VAR,  "\n#$1\n";}

    if($coefficient{$cell}{rise}{late} < $coefficient{$cell}{fall}{late}) {
    if($unit =~ /ns/i) {$coefficient{$cell}{fall}{late}=$coefficient{$cell}{fall}{late}/1000;}
    push @VAR,  "set_libcell_variation_parameters -max -variation $coefficient{$cell}{fall}{late} {\"$cell\"}\n";
    } else {
    if($unit =~ /ns/i) {$coefficient{$cell}{rise}{late}=$coefficient{$cell}{rise}{late}/1000;}
    push @VAR,  "set_libcell_variation_parameters -max -variation $coefficient{$cell}{rise}{late} {\"$cell\"}\n";
    }

    if($coefficient{$cell}{rise}{early} < $coefficient{$cell}{fall}{early}) {
    if($unit =~ /ns/i) {$coefficient{$cell}{fall}{early}=$coefficient{$cell}{fall}{early}/1000;}
    push @VAR,  "set_libcell_variation_parameters -min -variation $coefficient{$cell}{fall}{early} {\"$cell\"}\n";
    } else {
    if($unit =~ /ns/i) {$coefficient{$cell}{rise}{early}=$coefficient{$cell}{rise}{early}/1000;}
    push @VAR,  "set_libcell_variation_parameters -min -variation $coefficient{$cell}{rise}{early} {\"$cell\"}\n";
    }

    }


    my $wrteStatus = write_file(\@VAR, "set_libcell_variation.tcl", '>');
}
