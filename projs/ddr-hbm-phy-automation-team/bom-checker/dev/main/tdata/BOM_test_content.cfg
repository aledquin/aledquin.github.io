package CFG;

use Exporter;
use strict;
our @ISA   = qw(Exporter);

our %globals = %main::globals;
#------------------------------------------------------------------------------
#  Do *NOT* alter anything above this comment!
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# BOM OWNER RELATED
#------------------------------------------------------------------------------
   $globals{'fname_MM_XLSX'}     = "BOM_test_content.xlsx";
   $globals{'XLSX_sheet_name'}   = "MM";

   #------------------------------------------------------------------------------
   #  Setup a dictionary that defines the LEXICON allowed for file SPECs 
   #      There's two scopes ... global => applies uniformly across all components
   #                         ... local  => applies in context of single component
   #------------------------------------------------------------------------------
   $globals{'global_dictionary'} = {
        'allowed_literals' =>  [ qw( phyPrefix uniqPrefix process ) ],
        };
   $globals{'local_dictionary'} = {
        'allowed_literals' =>  [ qw( cell_name orientation version master_orientation ) ],
        'allowed_lists'    =>  [ qw( timing_cases mstack pvt_combos pvt_values pvt_corners ) ],
        };
   $globals{'file_SPEC_variables'} = {
        'phyPrefix'   => 'dwc_ddrphy',      # used to capture the prefix used for most files
        'uniqPrefix'  => 'dwc_ddr54phy',    # used to capture the prefix used for most files
        'process'     => 'tsmc7ff18',     # used in MM-2-bc.pl
        'conditional' => 'if AMD',        # used in MM-2-bc.pl
   };

#------------------------------------------------------------------------------
# USER BASED CONFIG
#------------------------------------------------------------------------------
   #------------------------------------------------------------------------------
   # User details for specifying the release configuration that want to use
   # and the list of components that want to generate the expected BOM.
   #------------------------------------------------------------------------------
      $globals{'release_to_check'} = 'd889-lp54-1.00a';
      $globals{'bom__cell_names'}  = [ qw( se sec diff master rptr_blocks utility_blocks ) ];  # just check hard macros
      # $globals{'bom__cell_names'}  = [ qw( se sec diff master_ew rptr_cells utility_cells
      #                                      phyinit firmware ctb CoreKit example doc       ) ];
      # name of the release you want checked 
      $globals{'bom__phase_name'}  = 'Final';
      $globals{'row__bom_start'}   = 9;

      $globals{'CSV_index_FILES'}  = 21;   # col num-  file names
      $globals{'CSV_index_VIEWS'}  = 20;   # col num-  view names
      $globals{'CSV_index_COND'}   =  4;   # col num-  "condition" (in row with cell names)
 
   #------------------------------------------------------------------------------
   # d851-lddr54 based on BOM v1.21
   #------------------------------------------------------------------------------
   $globals{'d889-lp54-1.00a'} =  sub {
      my $misc = {
	       'vars_that_get_inherited_by_cells'   => [ 'vici_url', 'mstack_regex', 'PVT_regex' ],
	       'base_path'   => '1.00a/',
			   'vici_url'    => 'http://vici/releasePageConstruct/index/id/26845/page_id/914',
			   'mstack_regex'=> '^PHY Metal Option: (.*)$',
			   'PVT_regex'   => '^PVT options : (.*)$', 
         #------------------------------------------------------------------------------
         # User can specify REGEX to use that will waiver (filter out) files from
         #   the lists being compared. User can also search for a REGEX and replace it       #       '\/ibis_ami\/', 
         #   with a value as well, which was found useful for comparing two releases.
         #------------------------------------------------------------------------------
         'inspector__REF_waivers' => [
	          '/calibre/', #Calibre reports are not required for tsmc7 - DavidH 10/15/2020
         ],
         'inspector__REL_waivers' => [ ],
         'inspector__REF_find_n_replace' => { },
         'inspector__REL_find_n_replace' => { },
	    };

      #------------------------------------------------------------------------
      #  Specify all details for each of the components in the BOM
	    #  Valid fields include :
			#   'dirname'     => "phyinit",  => value defines the name used for the
      #               directory path name,  which is required when the
      #               component name in the Manifest doesn't match the
      #               directory name
			#   'cell_name'   => "phyinit",  => value replaces ${cell_name} in Manifest
			#   'viciname'    => "phyinit",  => needed for corner cases where the
      #               component name in ViCi doesn't match the Manifest name
      #               This is a corner case seen a few times, but rarely needed
			#   'mstack_regex'=> '',   => if default REGEX isn't working then 
      #               it's a corner case and you'll want to specify a custom
      #               regex that can parse custom content in ViCi 
			#   'PVT_regex'=> '',   => if default REGEX isn't working then 
      #               it's a corner case and you'll want to specify a custom
      #               regex that can parse custom content in ViCi 
			#   'vici_url'  => 'http://vici/releasePageConstruct/index/id/25748/page_id/914',
			#               Most of the time, a single URL is needed, but corner
      #               cases require need to customize per component (e.g. hbm)
			#   'version_regex'=> '^phyinit\w+ : (\S+-\S+-\S+$)',
      #               default version_regex works for hard components,
      #               but not for soft, so override for soft components
      #               Default : 'version_regex' => "^$cell_name" . '.*:\s+(\d\.\d+\w+)$';
      #  
      #------------------------------------------------------------------------
      my $href_cells = {
	    'master'  => {
			   'timing_cases'=> [ '' ],
			   'overrides'   => { 
             'orientation' => '_ns',
	    'master_orientation'=>'_ns',
             #'mstack' => [ '6M_1X_h_1Xa_v_1Ya_h_2Y_vh', '8M_1X_h_1Xa_v_1Ya_h_2Y_vh' ],
         },
      },
	    'diff'  => {
			   'timing_cases'=> [ '' ],
			   'overrides'   => { 
             'orientation' => '_ns',
         },
      },
	    'se'  => {
			   'timing_cases'=> [ '' ],
			   'overrides'   => { 
             'orientation' => '_ns',
         },
      },
	    'sec'  => {
			   'timing_cases'=> [ '' ],
			   'overrides'   => { 
             'orientation' => '_ns',
         },
      },
	    'utility_blocks'  => {
			   'viciname'    => "utility cells library",
			   'timing_cases'=> [ '' ],
			   'overrides'   => { 
             'orientation' => 'N/A',
    #         'version' => '2.01a',
         },
      },
	    'rptr_blocks'  => {
			   'cell_name'   => "repeater_blocks",
			   'dirname'     => "repeater_blocks",
			   'viciname'    => "repeater cells library",
			   'timing_cases'=> [ '' ],
			   'overrides'   => { 
#             'mstack' => [ '6M_1X_h_1Xa_v_1Ya_h_2Y_vh' ],
             'orientation' => 'N/A',
             #'version' => '2.00a_pre4',
         },
			   'PVT_regex'   => '^PVT options : (.*)$', 
      },
	    'CoreKit'  => {
			   'cell_name'   => "installed_corekit",
			   'dirname'     => "installed_corekit",
			   'viciname'    => "installed_corekit",
			   'overrides'   => { 
			       'version'     => '',
             'orientation' => 'N/A',
			   },
			},
	    'phyinit'  => {
			   'overrides'   => { 
             'orientation' => 'N/A',
			   },
      },
	    'example'  => {
			   'overrides'     => { 
			       'version'      => '',
             'orientation'  => 'N/A',
			   },
      },
	    'firmware'  => {
			   'overrides'     => { 
             'orientation'  => 'N/A',
			   },
      },
	    'doc'  => {
			   'overrides'   => { 
             'orientation'  => 'N/A',
             'version'      => 'N/A',
			   },
      },
	    'ctb'  => {
			   'overrides'   => { 
             'orientation'  => 'N/A',
			   },
      },
	 };

   return( $href_cells, $misc );
};
#------------------------------------------------------------------------------
#  Do *NOT* alter anything below this comment!
#------------------------------------------------------------------------------
 %main::globals=%globals;
