#!/depot/perl-5.14.2/bin/perl
use strict;
use warnings;
use v5.14.2;

use Capture::Tiny ':all';
use Test2::Bundle::More;
use Test2::Tools::Compare;
use File::Path qw(make_path);
use Term::ANSIColor;
use Data::Dumper;
use File::Path qw(make_path remove_tree);

$Term::ANSIColor::EACHLINE = "\n";  # Resets the color after each newline...
use FindBin qw($RealBin $RealScript);
use lib "$RealBin/../lib";
use Util::CommonHeader;
use Util::P4;
use Util::Misc;
use Util::Messaging;

our $STDOUT_LOG = undef;
our $DEBUG      = NONE;
our $VERBOSITY  = NONE;
our $VERSION    = '2022.11';
our $DA_RUNNING_UNIT_TESTS = TRUE;

sub Main() {
    
    utils__process_cmd_line_args();

    test_basic_sync();    
        
    done_testing( );
    
    return(0); 
}

sub test_basic_sync {

    # Create temporary client
    my $unique = "2022_11_08";
    my $p4_client_name = "TEMP_CLIENT_DDR_HBM_${unique}";
    my $root = "/tmp/DDR_HBM_TEMP_CLIENT_${unique}";

    my $p4_view = "//wwcad/msip/projects/alpha/alpha_common/bin/... //${p4_client_name}/wwcad/msip/projects/alpha/alpha_common/bin/...";

    my $files = [$p4_view];

    my $client = da_p4_create_client( $p4_client_name , $root, $files);
    dprint(HIGH, "da_p4_create_client returned " . Dumper($client)  ."\n");

    # Sync the root
    my $status = da_p4_sync_root($client);
    # Note: $status could be the string using constant NULL_VAL or it could
    # be a number representing the number of files that got added.
    dprint(HIGH, "da_p4_sync_root() returned: status='$status'\n");

    my $croot = $client->{'ROOT'};
    my $fname = "${croot}/wwcad/msip/projects/alpha/alpha_common/bin/std_template.py";
    my $bfile = (-e "$fname" );    
    if (! $bfile) {
        eprint ("File '$fname' not found for uploading.\n")
    }

    my $prefix = "/wwcad/msip/projects/alpha/alpha_common/bin/experiments/test.txt.".time();

    my $file = "$croot".$prefix;
    dprint(LOW, "file is '$file'\n");

    # Add new file.
    da_p4_add_edit($client, $file);
    if ( ! -e $file ) {
        dprint(LOW, "file:'$file' does not exist!\n");
    }

    my $failed_write_file = FALSE;
    my $failed_make_path  = FALSE;

    Util::Misc::write_file("This is a file for testing purposes only.", $file);
    if ( ! -e $file ) {
        dprint(LOW, "file:'$file' still does not exist!\n");
        $failed_write_file = TRUE;
    }

    my $dpath = "$croot/wwcad/msip/projects/alpha/alpha_common/bin/experiments";
    dprint(LOW, "Calling make_path('$dpath')\n");
    make_path( $dpath );
    if ( ! -d  $dpath) {
        dprint(LOW, "make_path: dpath:'$dpath' does not exist!\n");
        $failed_make_path = TRUE;
    }

    # Submit
    da_p4_submit($client, $file, "Test submit from unit test.");

    my @files = da_p4_files("//wwcad/msip/projects/alpha/alpha_common/bin/experiments/...");
    my $nfiles = @files;
    if ( $nfiles == 0 ) {
        dprint(LOW, "da_p4_files returned nothing!\n");
    }else{
        dprint(LOW, "da_p4_files returned $nfiles files.\n");
    }

    # Delete the client
    dprint(LOW, "Calling da_p4_delete_client()\n");
    da_p4_delete_client($client);

    # Ensure that the file exists on Perforce.
    my $found=0;
    foreach my $fname ( @files ) {
        if ( $fname =~ m/.*$prefix.*/ ){
            $found = 1;
            last;
        }
    }

    if ( $found ) {
        if ( $failed_make_path || $failed_write_file ) {
            ok(1 == 0, "make_path($dpath) failed or write_file($file) has failed!");
        }else{
            ok(1 == 1, "da_p4_submit force success");
        }
    }else{
        my $showfiles = "";
        if ( $nfiles < 4 ){
            my $thefiles = join "\n\t", @files;
            $showfiles = "\n${thefiles}\n";
        }

        ok(1 == 0, "da_p4_submit force fail. Could not find '$prefix' from the $nfiles files returned by da_p4_files() $showfiles");
    }

} # end test_basic_sync

Main();
