#!/depot/perl-5.14.2/bin/perl -w
#!/depot/perl-5.8.0/bin/perl
###############################################################################
#
# Name    : alphaLibMap
# Author  : John Sheridan Fisher
# Date    : N/A
# Purpose : N/A
#
# Modification History
#   Created : 2016-05-04
#   Modified: 2016-05-04
#             2022-26-05 => HSW => Fixing script template and adding usage tracking.         
###############################################################################
use strict;
use warnings;
use Pod::Usage;
use Data::Dumper;
use File::Copy;
use Getopt::Std;
use Getopt::Long;
use File::Basename qw( dirname );
use File::Spec::Functions qw( catfile );
use Cwd     qw( abs_path getcwd );
use Carp    qw( cluck confess croak );
use FindBin qw( $RealBin $RealScript );

use lib "$RealBin/../lib/perl/";
use Util::CommonHeader;
use Util::Misc;
use Util::Messaging;

#--------------------------------------------------------------------#
our $STDOUT_LOG; # Initiailized in the BEGIN block
our $DEBUG        = NONE;
our $VERBOSITY    = NONE;
our $PREFIX       = "ddr-utils-original";
our $PROGRAM_NAME = $RealScript;
our $LOGFILENAME  = getcwd() . "/$PROGRAM_NAME.log";
our $VERSION      = get_release_version();
#--------------------------------------------------------------------#

BEGIN {
    our $AUTHOR='jfisher';
    #$STDOUT_LOG  = undef;     # undef       : Log msg to var => OFF
    $STDOUT_LOG   = EMPTY_STR; # Empty String: Log msg to var => ON
    header();
}
&Main();
END {
   footer();
   write_stdout_log( $LOGFILENAME );
   utils__script_usage_statistics( "$PREFIX-$PROGRAM_NAME", $VERSION );
}

########  MAIN FOLLOWS  ##############

use Capture::Tiny qw/capture/;
use File::Basename qw(dirname basename);
use FindBin qw($RealBin $RealScript);


## PERL libs
use strict;
use Getopt::Long;
use File::Copy;
use File::Basename;

#----------------------------------------------------------
## script usage message
sub usage {
    print << "EOP" ;
Description
  A script to copy and update PVTs in  LIB files, based on a provided mapping file.
  The intention is to enable reusing LIB files at different PVTs/metal-stacks.

  Maps LIB files:
   from <cell>/lib/<cell>_<msX>_<corner1>.lib  to  <cell>/lib/<cell>_<msY>_<cornerA>.lib
   from <cell>/lib_pg/<cell>_<msX>_<corner1>_pg.lib  to  <cell>/lib_pg/<cell>_<msY>_<cornerA>_pg.lib
 Based on map file:
   <cell>/<cell>.map
 Map file contains:
   <msX>_<corner1> => <msY>_<cornerA>
   <msX>_<corner2> => <msY>_<cornerB>
   <msX>_<corner3> => <msY>_<cornerC>

USAGE : $0 [options] cell

command line options:
-help             print this screen

Assumptions:

EOP
exit ;
}


#----------------------------------------------------------
sub Main(){
    ## get specified args
    my($success, $opt_help, $opt_debug,$opt_verbosity);
    $success = GetOptions(
        "help!"       => \$opt_help,
        "debug=i"     => \$opt_debug,
        "verbosity=i" => \$opt_verbosity,
    );
    $main::VERBOSITY = $opt_verbosity if( defined $opt_verbosity );
    $main::DEBUG     = $opt_debug     if( defined $opt_debug     );
 
    ## quit with usage message, if usage not satisfied
    &usage if ($success != 1);
    &usage if ($#ARGV != 0);
    &usage if $opt_help;


    ## cells
    my $cell = $ARGV[0];

    ## Welcome
    iprint ("Attempting to copy $cell cell LIB files, based on $cell/$cell.map mapping file\n");

    ## local vars
    my($mapFile, %mapCorners);
    my($origMs, $mapMs, $origPvt, $mapPvt, $origVolt, $mapVolt, $origTemp, $mapTemp);
    my($origLibFile, $origLibPgFile, $mapLibFile, $mapLibPgFile);

    ## process map file
    ##  open map file
    $mapFile = "$cell/$cell.map";
    ## loop thorugh map file
    foreach my $line ( read_file($mapFile) ){
        ## delete comments
        $line =~ s/\#.*//;
    
        ## ignore blank lines
        next if( $line =~ m/^\s*$/ );
        ## identify mappings
        if( $line =~ m/^\s*([^\=\s]+)\s*\=\>\s*([^\=\s]+)\s*$/ ){
            my $origCorner = $1;
            my $mapCorner  = $2;
            ## store them
            $mapCorners{$mapCorner} = $origCorner;
            ## check that orig LIB files exist
            $origLibFile = "${cell}/lib/${cell}_${origCorner}.lib";
            $origLibPgFile = "${cell}/lib_pg/${cell}_${origCorner}_pg.lib";
            if(!-e $origLibFile){
                eprint ("ERROR: $origLibFile LIB file is missing. Exiting.\n");
                exit 1;
            }
            elsif(!-e $origLibPgFile){
                eprint ("ERROR: $origLibPgFile LIB PG file is missing. Exiting.\n");
                exit 1;
            }
        }
    } ## end foreach

    ## copy files
    foreach my $mapCorner (sort keys %mapCorners){
        ## parse orig params
        my $origCorner = $mapCorners{$mapCorner};
        if($origCorner =~ /^(\S+)_(\w+(\d+p\d+)v(n?\d+)c)$/){
	          $origMs   = $1;
	          $origPvt  = $2;
	          $origVolt = $3;
	          $origTemp = $4;
	          $origVolt =~ s/p/./;
	          $origTemp =~ s/n/-/;
        }
        else{
            eprint ("ERROR: $origCorner original corner is not legal <ms>_<process><volt>v<temp>c\n");
            exit 1;
        }
        ## parse map params
        if($mapCorner =~ /^(\S+)_(\w+(\d+p\d+)v(n?\d+)c)$/){
            $mapMs = $1;
            $mapPvt = $2;
            $mapVolt = $3;
            $mapTemp = $4;
            $mapVolt =~ s/p/./;
            $mapTemp =~ s/n/-/;
        }
        else{
            eprint ("ERROR: $mapCorner mapped corner is not legal <ms>_<process><volt>v<temp>c\n");
            exit 1;
        }

        ## LIB files
        $origLibFile   = "${cell}/lib/${cell}_${origCorner}.lib";
        $origLibPgFile = "${cell}/lib_pg/${cell}_${origCorner}_pg.lib";
        $mapLibFile    = "${cell}/lib/${cell}_${mapCorner}.lib";
        $mapLibPgFile  = "${cell}/lib_pg/${cell}_${mapCorner}_pg.lib";

        ## skip if map file exists
        if(-e $mapLibFile){
	        wprint ("  The $mapLibFile mapped lib file exists already. Skipping...\n");
        }
        else{
	          ## open files
	          open(my $OFH, '>', $mapLibFile) || fatal_error("I/O ERROR: Failed to open file $mapLibFile: $!\n"); # nolint open
	          iprint ("  Mapping $origLibFile       to $mapLibFile...\n");
    
	          ## print header
	          print $OFH "/* Mapped LIB file by $0 from $origLibFile */\n";
    
	          ## loop thru orig file
	          foreach my $line ( read_file($origLibFile) ){
	              ## map library
	              $line =~ s/^(\s*library\s*\(\"?${cell}_)${origCorner}(\"?\))/$1$mapCorner$2/;
    
	          ## map pvt
	              $line =~ s/^(\s*operating_conditions\s*\(\s*\"?)$origPvt(\"?\s*\))/$1$mapPvt$2/;
	              $line =~ s/^(\s*default_operating_conditions\s*\:\s*\"?)$origPvt(\"?\s*\;\s*)$/$1$mapPvt$2/;
    
	              ## map temp
	              $line =~ s/^(\s*nom_temperature\s*\:\s*)$origTemp(\.?0*\s*\;\s*)$/$1$mapTemp$2/;
	              $line =~ s/^(\s*temperature\s*\:\s*)$origTemp(\.?0*\s*\;\s*)$/$1$mapTemp$2/;
    
	              ## map volt
	              $line =~ s/^(\s*nom_voltage\s*\:\s*)$origVolt(\.?0*\s*\;\s*)$/$1$mapVolt$2/;
	              $line =~ s/^(\s*voltage\s*\:\s*)$origVolt(\.?0*\s*\;\s*)$/$1$mapVolt$2/;
	              $line =~ s/^(\s*voltage_map\s*\(\s*\"?\w+\"?\s*\,\s*)$origVolt(0*\s*\)\s*\;\s*)$/$1$mapVolt$2/;
	              ## write output line
	              print $OFH "$line\n";
	              
	          } ## end foreach
	          close($OFH);
        } ## end  if(!-e $mapLibFile)
    
        ## skip if map file exists
        if(-e $mapLibPgFile){
	          iprint ("  The $mapLibPgFile mapped lib file exists already. Skipping...\n");
        }
        else{
	          ## open files
	          open(my $OFH, '>', $mapLibPgFile) || fatal_error ("I/O ERROR: Failed to open file $mapLibPgFile: $!\n"); # nolint open
	          iprint ("  Mapping $origLibPgFile to $mapLibPgFile...\n");
	          ## print header
	          print $OFH "/* Mapped LIB file by $0 from $origLibPgFile */\n";
	          ## loop thru orig file
	          foreach my $line ( read_file($origLibPgFile) ){
	              ## map library
	              $line =~ s/^(\s*library\s*\(\"?${cell}_)${origCorner}(\"?\))/$1$mapCorner$2/;
    
	              ## map pvt
	              $line =~ s/^(\s*operating_conditions\s*\(\s*\"?)$origPvt(\"?\s*\))/$1$mapPvt$2/;
	              $line =~ s/^(\s*default_operating_conditions\s*\:\s*\"?)$origPvt(\"?\s*\;\s*)$/$1$mapPvt$2/;
    
	              ## map temp
	              $line =~ s/^(\s*nom_temperature\s*\:\s*)$origTemp(\.?0*\s*\;\s*)$/$1$mapTemp$2/;
	              $line =~ s/^(\s*temperature\s*\:\s*)$origTemp(\.?0*\s*\;\s*)$/$1$mapTemp$2/;
	        
	              ## map volt
	              $line =~ s/^(\s*nom_voltage\s*\:\s*)$origVolt(\.?0*\s*\;\s*)$/$1$mapVolt$2/;
	              $line =~ s/^(\s*voltage\s*\:\s*)$origVolt(\.?0*\s*\;\s*)$/$1$mapVolt$2/;
	              $line =~ s/^(\s*voltage_map\s*\(\s*\"?\w+\"?\s*\,\s*)$origVolt(0*\s*\)\s*\;\s*)$/$1$mapVolt$2/;
	              ## write output line
	              print $OFH "$line\n";
	        
	          } ## end  while(<IFH>)
	          close($OFH);
        } ## end  if(!-e $mapLibPgFile)
    } ## end  foreach $mapCorner (sort keys %mapCorners)

    ## all done
    hprint ("All done\n");
    
    return();
};

