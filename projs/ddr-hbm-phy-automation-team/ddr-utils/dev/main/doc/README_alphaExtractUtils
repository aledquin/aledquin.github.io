A command-based, batch extraction setup has been created to streamline the process of running extracts of all types

 
Acessing the script:

Directly sourcing the script in Custom Compiler:
  source /remote/cad-rep/msip/tools/Shelltools/ddr-utils/${version}/bin/alphaExtractUtils.tcl
    - {$version} should be replaces with the desired version

Script can also be loaded in Custom Compiler through the tool ddr_utils_loader.tcl:
GUI
There are two ways to access the dialog,
1. Using the command ddr_utils::gui
2. Selecting DDR Utils Loader from the DDR-Utils menu that can be found in layout and schematic editors.
The dialog has three columns. To load alphaExtractUtils.tcl, first select ddr-utils tool, then the desired version, and then the script from the rightmost column. You can click apply to load the script and keep the dialog or ok to load the script and exit the dialog. The filter can be used to help locate the script.


Usage:   
alpha::lpe::runExtract (help|flat|flatRA|selectedNets) -libName <your-lib-name> -cellName <your-cell-name>  [other options] 

  
Description:
This script is intended to streamline the three main types of extraction used for the alpha projects: flat and selectedNets (bbox). 
Flat extracts are simple, down-to-the-device extracts, producing an hspice-able netlist, typically spf. 
FlatRA extracts are equivalent to to RCXTRA extracts used for EMIR analysis. 
selectedNets extracts (so called because the flow was originally implemented using the pv selectedNets method) is how we’re running black-box extracts, in which extraction stops at a specified set of cells.  Despite the name, for versions of pv that support the new bbox flow (2016.11 or later), it’s the new bbox flow that’s getting run. 

 
What the script does, core functionality: 
Basically, what this script does is to create the necessary setup for a pvbatch-based extract that is then submitted to the grid for execution. (pvbatch is part of MSIP PV module that allows batch-mode pv steps to be run.) This setup will be done in the directory pv normally uses for pv steps:  $RUN_DIR_ROOT/$libName/cellName.
- RUN_DIR_ROOT is normally defined in the pcs project.env, and by convention should be "$udescratch/$USER/verification/$MSIP_PRODUCT_NAME/$MSIP_PROJ_NAME/$MSIP_REL_NAME/$METAL_STACK" 

Any option that’s defined by a pv preference, (and would appear pre-filled in the pv gui) will also be defined for extracts run via this method. In addition to preferences, specific options may be specified on the runExtract command line. In general, these options map directly to a pvbatch config variable. (More on this later). Default options may be defined at the pcs level, freeing the user from the necessity of adding certain project-standard options to all commands.  (More on this later as well). 

One of the useful things this script does is to create the bbox config file automatically using a master bbox file that’s expected to exist in the pcs/design dir. This frees the use from having to create this manually. Yes, a superset bbox file could be created for the project (the master list in pcs/design is essentially this), but having one specific to the cell allows it to be used by a post-extraction checker to verify that the extract was successful by the presence of the expected bbox cell instances. 


What the script does, ancillary functions: 
In addition to just running the extract, the following supporting functions are performed: 
1. A check of the extract results, including a verification of lvs cleanliness, expected netlist existence and, for selectedNets (bbox) extracts, a check for the presence of the expected bbox  
   instances in the extracted netlist. 
2. Email notification of the above, sent to the user and an optional list of recipients. 
3. The above two functions are performed by the alphaCheckExtractResults.tcl script, automatically set up as part of the extract run
4. Several checks designed to check the preparedness of the macro for bbox extracts. These are described later in this doc. 
5. Creation of a hierarchical tag file (really just a “p4 have” of the cellviews used in the design being extracted. (This function is described separately.) When requested, the tag file 
   is created, and added to p4, then checked in by the extract check script if the run was deemed successful, reverted otherwise.)


Required args: 
cellName: Name of cell.
libName: Name of lib.


Arguments specific to this script, (not having pvbatch equivalence): 
- run: tcl Boolean, “interactive”, “batch”. (Interactive runs may have never actually been tried.) Adding “-run 0” is useful for debug, setting up the run but not queueing it. 
- xTypes: Simple list, enumerating the extract types to be done. One or more of {r c cc rc rcc srccpcc sccprcc ccssrcc} 
- genHspice: Directs the script to create an Hspice (schematic) netlist for the cell being extracted. Handy for extracts that will feed Nanotime, as the Hspice netlist is required. Disabled  
  by default 
- hspiceDir: Directory in which the above netlist is written.  outDir is used otherwise. 
- uncommentRawNetlistSubckt: Boolean, enables uncommenting the top .subckt from the raw netlist. Applies to RA extracts.
- mailDist: A mail distribution used for the post-extract report. By default just mails to the submitting user. 
- The following are related to the checks mentioned in #3 above: 
  - nocheck: Skips the SNPS_check and tag file checks. 
  - rev: The rev number used for tagFile checks.  Latest is the default. 
  - snpsCheck: Name of the layout errors file to check.
  - bboxLvs: Name of the lvs RESULTS file to check. 
  - bboxWaive: Path to a bbox waiver file. 
  - P4Sync: Enables sync’ing of the user client to the versions specified in the tag file.
- tag: P4 comment used for the tag file.  Defining this enables creation of the tag.


Arguments directly mapped to pvbatch variables, and most likely to be manipulated by the user or pcs: 
- rundir: The directory to store verification files. 
- userGDS: User defined GDS. If not specified, streamed out. 
- userNetlist: The user netlist. If not specified, a netlist is streamed out. 
- virtualConnect: The virtual connect value for the specified tool. For ICV tool in case the ICV virtual connect new flow is enabled by MSIP<PV prefix>enableIcvVirtualConnectNewFlow preference,  
  then the acceptable values for virtual connect are: ON, OFF, CUSTOM and FOUNDRY_DEFAULT. 
- cornerVal: The list of the corners. Varies by foundry. 
- xtPowerExtract: Power extract type.   
- xtPowerNets: List of power nets 
- outDir: The directory storing the extracted netlists 
- xReduction: Reduction
- xtGroundNode: Ground Node Name 
- superconductivePorts: Enable superconductive ports when black boxing 
- enableFEOLFilling: Enable FEOL filling 
- enableBEOLFilling: Enable BEOL filling
  - Regarding the above: Fill, particularly BEOL fill, can have a significant impact on some wire RC, so
- enableCellViewMerge: 1/0, enables the merging of additional views into the gds. Currently necessary for some gf7 cells.
- viewsList: simple tcl list, the views to be included in the merging mentioned above.
  - The above two are new as of msip_cd_pv/2017.10.


Arguments that are automatically set by the script:
These won’t generally need to be specified by the user. 
- blackBoxEnabled: Enable/disable the black box flow. Set to 1 by the script for selectedNets extracts, 0 otherwise.
- blackBoxConfigFile: The black box configuration file. Built automatically by the script, generally no need for user intervention.
- xtSelNetsSRCCPCC: selected net setup for SRCCPCC. Built automatically from xtPowerNets.
- xtSelNetsSCCPRCC: selected net setup for SCCPRCC. Built automatically from xtPowerNets.
- xtSelNetsCCSSRCC: selected net setup for CCSSRCC. Built automatically from xtPowerNets.
- rcxtTypes: The extraction types in 0/1 for the following list: "r" "c" "cc" "rC" "rCc" "srccpcc" "sccprcc" "ccssrcc".
  Default is "0 0 0 0 1 0 0 0", i.e. rCc is enabled. This is auto-generated from the xTypes arg described above.


Less common pvbatch args:
Any of these may be added to the command line.  Example “runExtract flat …  -sourceFile myFile.sourceme” 
- xTempSens: Temperature sensitivity
- runFlat: Enable/disable running in flat mode, values are 1 or 0. 
- icvOpts: Applicable only for ICV tool: ICV options, e.g. "-ndg", "-dp4", etc.
- tool: The tool used for lvs, icv or calibre.  Never actually tried this with calibre.
- toolExtraArg: Extra arguments for the given verification and tool.
- pcsOptionsFile: PCS options files can be overwritten in case they were defined in the project, otherwise even defined pvbatch will ignore the value.
- sourceFile: File to be sourced before running verification.
- layermap: Layermap to be used when doing a streamout.
- incrlayermap: Incrmental layermap to be appended to the top of the layermap during streamout.
- objectLayermap: Object layermap to be used when streaming out. 
- errorLimitEnabled 
- errorLimit: To enable error limit and for defining value for the limit. 
- stack: For defining the metal stack  
- compressedGDS: Enable/disable compressing the GDS 
- onlyGDS: Create only the GDS and stop work. 
- gdsExportTemplateFile: Specifies the GDS export Template File. 
- deleteEmptyCell: Enable/disable deleting empty cells from the GDS file. 
- fixLayout: Enable/disable fixing the non-GDSII characters 
- runHerculesServer: Defined server names for running verifications for Hercules tool. 
- runCalibreServer: Defined server names for running verifications for Calibre tool: 
- runICVServer: Defined server names for running verification for ICV tool 
- runCalibreCalex: Enable/Disable running Calex 
- calexExtraArg: Extra arguments for CalexRun 
- calexGDS: Use GDSII format instead of OASIS 
- calexMail: Send notification by e-mail 
- calexTestChip: Enable running as a testchip (run with multiple licenses)
- calexFiles: Additional files to be used while calex is being run.
- calexSiteCheckbox: Enable/Disable selecting a site
- calexDefaultSite: Select a site for running Calex 
- viewSchematicName: The default schematic view name 
- viewSchematicLibName: The default schematic view library name
- nettranOptions: The options for the nettran
- compressedLVSNetlist: Enable/disable compressing the netlist
- onlyNetlist: Create the netlist and stop work.
- netViewSearch: The view search list of the netlister
- netViewStop: The view stop list of the netlister
- netPostProcEN: Enable netlist post processing
- netlistPProc: The full path of the post processing script
- netlister: The output Netlist Type
- incNetlist: Include netlist
- netlistBracketChange: Enable netlist bracket changing
- cdlCheckboxWidget: Enable checking/manipulating the netlist.
- cdlToolCheckboxWidget: Enable checking/manipulating the netlist for specific tool only (will overwrite the value above).
- actionType: The types of actions for the netlist "Check" or "Delete_subckts".
- listOfDeleteSubs: The subckts to be removed from the netlist.
- abortOnLVSFail: Abort if the LVS Fails. Possible values: YES, NO, On-Fail. Default is On-Fail.
- useMWDB: User defined Milkyway Database.
- extrPreservedEnabled: Enable Extraction of Selected Nets
- libFilteredList: List of libraries that should be excluded during extraction of selected nets
- dumpOnlyStarCmd: Enables dumping the extraction command files only. 
- selNetrcxtType: Extraction of Selected Nets, possible values: Automate/Custom.
- extrPreservedConfigFile: Extraction preserved configuration file 
- extrPreservedEquivFile: Extraction Preserved Equivalence file 
- selectedNetList: Selected nets (Extraction of selected nets feature) 
- xDpNumCores: Number of cores for extraction. 
- cmdFile: Extraction command file template  
- usercmdFileEn: Enable user extraction command file 
- usercmdFile: User extraction command file 
- TCAD_list: The list of the corners and corresponding rule files in the following format: <corner1> <path to the corner1 rules file> 
- mapFile_list/XTMapFile:  If the <prefix>MapFile environment variable is defined, then the mapFile_list variable should be used and PV will create the XTMapFile automatically, if not then the   
  variable to redefine the map file is  XTMapFile. 
- xtSeparateExtract: Enable separate extraction for each power net 
- xFile: X_DEV File 
- xtFormat: Output extraction netlist format. 
- xAccuracy: Mode 
- xAnalogSymmetricNets: Analog Symmetric Nets 
- xCrossRef: Cross Reference 
- xInst: Netlist instance section 
- xSubCkt: Enable creating subckt definition 
- xCase: Enable case sensitivity 
- xrmFloat: Enable removing floating nets 
- xrmDangling: Enable removing dangling nets 
- xrmDanglingBranches: Enable removing dangling branches 
- xHierSeparator: Enable hierarchical separator "." 
- reductionCmdFileEn: Enable user reduction command file 
- reductionCmdFile: User Reduction command file 
- xSubExtraction: Substrate extraction 
- parasiticNetlistPreProc: Netlist processing script path. 
- xWidgetsList: The list of the widgets 
- xPresmult: Presmult value 
- xPcapmult: Pcapmult value 
- xUnflattenNetlist: Enable unflattening netlist 
- xAddx: Enable adding "x" 
- podPostProc: Enable pode post processing on the extracted netlist 
- podPostProcOpt: Pode post processing on drain or bulk 
- extractedNetlistPProcessor: Enable extracted netlist post processing 
- xnetViewSearch: The view search list of the sim netlister 
- xnetViewStop: The view stop list of the sim netlister 
- xEnMetalShorting: Enable metal shorting 
- metalShortingName: The metal shorting value 
- cTemplateFile: Calibre query file for extraction. 
- xEnExtractViaCaps: Enable extract via caps 
- extractViaCaps: Extract via caps value 
- xtFormatNet: Enable selecting the netlist format netname. 
- useCompressedExtrNetlist: Enable using compressed extracted netlist 
- enExtrPresets: Enable extraction presets 
- xExtrPresets: Take into consideration that the preset name also can come from the pvbatch --config_view. 
  In this case overwrite the preset from the config file with the one coming from the config_view.  
- xLayoutOnly: To enable extracting layout only 
- xMergeShortedPorts: Enable Netlist Merge Shorted Ports, to set the value to YES in the extraction command file, NO otherwise. 
- enableDRCFilling: Enable Filling  
- enableParallelFilling: Enable parallel filling


Defining Default Options:
Default options may be defined, generally in the pcs (pcs.tcl, or METAL_STACK/env.tcl) using the following command: 
   alpha::lpe::setDefaultArg [-type selectedNets|flat|flatRA] argName argValue 
As most pv options can be specified using preferences, this is most useful for defining options that will be different for a different extract type. Example:
   alpha::lpe::setDefaultArg -type selectedNets xtPowerExtract DEVICE_LAYERS
   alpha::lpe::setDefaultArg -type flat xtPowerExtract DEVICE_LAYERS
   alpha::lpe::setDefaultArg -type flatRA xtPowerExtract YES
The above allows for different xtPowerExtract settings for different types of extract. Defining defaults that are truly common for different RCXT purposes is preferred, since it affects both script and gui driven extracts.


Implementation Details: 
The extract is set up as a simple pvbatch job containing the following components, all of which are placed in the rundir (default or user-specified): 
1. Top level shell script: $rundir/$cellName.$type.pvbatch.csh. Contains the invocation for pvbatch and the post-extract checker. 
2. Pvbatch config file: $rundir/$cellName/$type.pvbatch.config. This contains all the pvbatch variable definitions plus variables that are specific to the flow, and have no pvbatch meaning. 
3. Source shell file: $rundir/$cellName/$type/.pvbatch.sourceme. This contains environment variable defines and module loads. It allows the key components that are defined in the interactive 
   session to be passed along to the pvbatch job. These include: 
    a. P4 PORT and CLIENT 
    b. ICV version 
    c. STARRC version 
    d. Pv version. 
4. Run log file: $rundir/$cellName/$type/.pvbatch.log. This is the main log file for the ude pvbatch session.  If the run has issues (hanging is common with pvbatch, if something goes wrong), this  
   is the first place to look.


alphaRunExtract updates requiring SNPS_CHECK & BBOX logs:
This is the detail for #3 in the ancillary functions, mentioned above. Mengdi He wrote this part and questions should be directed to her. 

Overview 
- Add requirements for SNPS_check and Bbox LVS check logs before extraction runs, to ensure TC get the correct result.
- Checks for:  
  1. File existence on P4 
  2. Whether log is generated after latest tag revision  
  3. Result is clean/SNE error free - will abort if log not clean 
- Auto update corresponding tag in p4, and populate based on latest tag. 

To run: run alphaRunExtract as usual. Check all files at default locations:  

- Tag default location:
  //wwcad/msip/projects/<HMF>/<project code names>/latest/lib/<libName>/<cellName>.tag
- SNPS_CHECK log default location:
  //wwcad/msip/projects/<HMF>/<project code names>/latest/design/timing/bbox/<cellName>.LAYOUT_ERRORS
- Bbox LVS log default location: 
  //wwcad/msip/projects/<HMF>/<project code names>/latest/design/timing/bbox/<cellName>.RESULTS
- Optional flags:
  -snpsCheck
   “//wwcad/msip/projects/$prodName/$projName/latest/design/timing/bbox/$argArray(cellName).LAYOUT_ERRORS” (or some disk path)
  -bboxLvs
   “//wwcad/msip/projects/$prodName/$projName/latest/design/timing/bbox/$argArray(cellName).RESULTS” (or some disk path)
  -rev <some tag revision number> 
   This lets user choose the tag version instead of relying on the latest tag, otherwise the default will be the latest revision.
  -p4Sync <1/0> 
   Script will only populate files based on tag if user specified -p4Sync = 1. Will not sync if flag not specified or value is 0.
  -bboxWaive <path-to-waiver-file>
   A sample waiver file can be found at: (please do not skip lines when filling in the file)
    /remote/us01dwt1p051/cheah/p4_ws/projects/ddr43/d519-ddr43-tsmc7ff18/latest/design/timing/bbox/test_waivers.csv
- If optional flag (s) are not specified, the scripts uses its default path (p4), or exit if log file does not exist at default path


Run log will display warnings if:
- File does not exist at default locations, and alternate paths are used.
- Log generated after latest tag revision.
- There are SNE warnings in SNPS_Check log.
- Any warnings occurred syncing p4. 

- Script will abort if LVS not clean or SNPS_check has SNE errors. 


Top level shell script:
The top-level shell script looks like this: 

#!/bin/csh 
module unload msip_cd_pv 
module load msip_cd_pv/2017.06-1 
setenv P4PORT p4p-us01:1999 
setenv P4CLIENT msip_cd_clouser 
pvbatch \ 
 --projectType ddr54 \ 
 --projectName d589-ddr45-lite-tsmc7ff18 \ 
 --releaseName rel1.00 \ 
 --metalStack 15M_2X_hv_1Ya_h_5Y_vhvhv_2Yy2Yx2R \ 
 --type lpe \ 
 --prefix RCXT \ 
 --libName dwc_ddrphy_bitslice \ 
 --cellName dwc_ddrphy_txrxac_ew \ 
 --tool icv \ 
 --config $rundir/dwc_ddrphy_txrxac_ew/dwc_ddrphy_txrxac_ew.selectedNets.pvbatch.config \ 
 --udeArgs '--sourceShellFile $rundir/dwc_ddrphy_txrxac_ew.selectedNets.pvbatch.sourceme --log $rundir/dwc_ddrphy_txrxac_ew/dwc_ddrphy_txrxac_ew.selectedNets.pvbatch.log' 

/remote/cad-rep/msip/tools/Shelltools/ddr-utils/${version}/bin/alphaCheckExtractResults.tcl \ 
 --projectType ddr54 \ 
 --projectName d589-ddr45-lite-tsmc7ff18 \ 
 --releaseName rel1.00 \ 
 --metalStack 15M_2X_hv_1Ya_h_5Y_vhvhv_2Yy2Yx2R \ 
 --type lpe \ 
 --prefix RCXT \ 
 --libName dwc_ddrphy_bitslice \ 
 --cellName dwc_ddrphy_txrxac_ew \ 
 --tool icv \ 
 --config $rundir/dwc_ddrphy_txrxac_ew.selectedNets.pvbatch.config \ 
 --udeArgs '--sourceShellFile $rundir/dwc_ddrphy_txrxac_ew.selectedNets.pvbatch.sourceme --log $rundir/dwc_ddrphy_txrxac_ew/dwc_ddrphy_txrxac_ew.selectedNets.pvbatch.log' 

Note that the invocation of the post extract checker is built to use the same command options as the pvbatch command, though not all are necessary.


Pvbatch Config File: 
Example: 

set runExtractType selectedNets
set blackBoxEnabled {1}
set cellName {dwc_ddrphy_txrxac_ew}
set xtGroundNode {VSS}
set XTMapFile {/remote/cad-rep/projects/cad/c241-tsmc7ff-1.8v_qcom/rel2.0/cad/shared/starrcxt/starrcxt_mapping_snps_custom_15M_2X_hv_1Ya_h_5Y_vhvhv_2Yy2Yx2R}
set gridProc {-dp4}
set xtSelNetsSCCPRCC {CC * !VDD !VDDQ !VSS !VAA RCC VDD VDDQ VSS VAA}
set xtSelNetsSRCCPCC {RCC * !VDD !VDDQ !VSS !VAA CC VDD VDDQ VSS VAA}
set blackBoxConfigFile {/slowfs/us01dwt2p312/clouser/verification/ddr54/d589-ddr45-lite-tsmc7ff18/rel1.00/15M_2X_hv_1Ya_h_5Y_vhvhv_2Yy2Yx2R/dwc_ddrphy_bitslice/dwc_ddrphy_txrxac_ew/dwc_ddrphy_txrxac_ew.bbox.config}
set tag {AutoGen-Successful SNE by the alphaRunExtract script}
set toolExtraArg {-dhe true}
set xtPowerExtract {DEVICE_LAYERS}
set gridOpts {-conf /remote/sge/cells/snps/common/settings.sh -dp4 -quick -wait}
set preserveBlackBoxCells {1} 
set compressedLVSNetlist {false} 
set libName {dwc_ddrphy_bitslice} 
set mapFile_list {typical /remote/cad-rep/projects/cad/c241-tsmc7ff-1.8v_qcom/rel2.0/cad/shared/starrcxt/starrcxt_mapping_snps_custom_15M_2X_hv_1Ya_h_5Y_vhvhv_2Yy2Yx2R}
set virtualConnect {ON} 
set superconductivePorts {1}
set runFlat {false}
set rundir {/slowfs/us01dwt2p312/clouser/verification/ddr54/d589-ddr45-lite-tsmc7ff18/rel1.00/15M_2X_hv_1Ya_h_5Y_vhvhv_2Yy2Yx2R/dwc_ddrphy_bitslice/dwc_ddrphy_txrxac_ew} 
set cornerVal "typical"
set selectedNetList {"*"}
set xTypes {rcc}
set rcxtTypes {0 0 0 0 1 0 0 0}
set xtSelNetsCCSSRCC {CC * !VDD !VDDQ !VSS !VAA RCC VDD VDDQ VSS VAA}
set stack {15M_2X_hv_1Ya_h_5Y_vhvhv_2Yy2Yx2R}
set extractedNetlistPProcessor {0}
set xPowerNets {VDD VDDQ VSS VAA}
set alphaNetlistDir /remote/proj/ddr54/d589-ddr45-lite-tsmc7ff18/rel1.00/design/15M_2X_hv_1Ya_h_5Y_vhvhv_2Yy2Yx2R/netlist/extract/dwc_ddrphy_txrxac_ew/rcxt/checkout/clouser
lappend alphaCheckResults {Info:  snpsDefault = //wwcad/msip/projects/ddr54/d589-ddr45-lite-tsmc7ff18/latest/design/timing/bbox/dwc_ddrphy_txrxac_ew.LAYOUT_ERRORS}
lappend alphaCheckResults {Info:  bboxLvsDefault = //wwcad/msip/projects/ddr54/d589-ddr45-lite-tsmc7ff18/latest/design/timing/bbox/dwc_ddrphy_txrxac_ew.RESULTS}
lappend alphaCheckResults {Warning: SNPS_CHECK or Bbox LVS is run before latest tag revision, please re-run}
set tagFile /remote/us01dwt1p051/clouser/p4_ws/projects/ddr54/d589-ddr45-lite-tsmc7ff18/latest/lib/dwc_ddrphy_bitslice/dwc_ddrphy_txrxac_ew.tag

This is really just a list of tcl commands defining a set of variables. The ones highlighted in yellow are ones that are not related to pvbatch, and exist for post-extract checker:
- alphaNetlistDir: Where to expect the resulting netlist. This can vary depending on the type of the extract and the version of pv in play. Tells the checker where to look for the netlist.
- alphaCheckResults: Some information generated by the tag/snps checker to be included in the completion email.
- tagFile: The tag file that was generated by the extract script, to be checked in if extract was successful, reverted otherwise.
- tag: The comments to use when the above tagFile is checked in.

cornerVal is something of an exception. In general, all options are simple variables, so any tcl-valid way of defining the variable is fine. Pvbatch does a peculiar thing with cornerVal, (I’ll spare you the details). Anyway, this one variable must be delimited with double quotes, and must be a simple set command. 


Example of running BlackBox Extraction:
 alpha::lpe::runExtract selectedNets -libName dwc_ddrphy_rx -cellName dwc_ddrphy_se_rx_ew -virtualConnect ON -xTypes rcc -xReduction YES -xTempSens NO -xtPowerExtract "DEVICE_LAYERS NON_DEVICE_LAYERS_CONLY“ -excludeCell *_stdcover -xtPowerNets {VDD VDDQ VDD2 VSS}
 