#!/depot/perl-5.14.2/bin/perl -w


##
## Created by John Sheridan Fisher, 2015-11-20
## Maintained by jsf, 2015-11-20
##
## To-Do:
##

## PERL libs
use strict;
use warnings;
use Getopt::Long;
use File::Basename;
use Cwd;
use Carp qw(cluck confess croak);
use Capture::Tiny qw/capture/;
use File::Basename qw(dirname basename);
use FindBin qw($RealBin $RealScript);

use lib "$RealBin/../lib/perl/";
use Util::CommonHeader;
use Util::Misc;
use Util::Messaging;

#--------------------------------------------------------------------#
our $STDOUT_LOG; # Initiailized in the BEGIN block
our $DEBUG        = NONE;
our $VERBOSITY    = NONE;
our $TESTMODE     = NONE;
our $PROGRAM_NAME = $RealScript;
our $LOGFILE_OUT  = "${PROGRAM_NAME}.log";
our $LOGFILENAME  = getcwd() . "/$PROGRAM_NAME.log";
our $VERSION      = get_release_version() || '2022.11'; 
#--------------------------------------------------------------------#

BEGIN{
    our $AUTHOR='jfisher, ljames';
    #$STDOUT_LOG  = undef;     # undef       : Log msg to var => OFF
    $STDOUT_LOG   = EMPTY_STR; # Empty String: Log msg to var => ON
    header();
}
&Main();
END{
    local $?;   ## adding this will pass the status of failure if the script
                ## does not compile; otherwise this will always return 0
    footer();
    write_stdout_log("$LOGFILENAME");
}


#------------------------------------------------------------------------------
#  Starting MAIN
#------------------------------------------------------------------------------
sub Main(){
    my @orig_argv = @ARGV; # keep this here cause GetOpts modifies ARGV

    my( $opt_projSPEC, $opt_nousage, $opt_p4ws ) =  process_cmd_line_args();

    $opt_p4ws = 'p4_ws' unless( defined $opt_p4ws );
    unless ( $DEBUG || $opt_nousage ) {
        utils__script_usage_statistics( $RealScript, $VERSION, \@orig_argv);
    }

    my $logFile = &cwd().'/'.$PROGRAM_NAME.'.log';
    $LOGFILE_OUT = $logFile;

    ## local variables
    my($timingPath, $pininfoPath, $timingAreaFile, $pininfoAreaFile);
    my($cmd, $macro, $libFile, $area, %pininfoArea, %macrosFixed);

    ## check timing/pininfo paths
    $pininfoPath = "/remote/cad-rep/projects/$opt_projSPEC/design/pininfo/latest";
    my $username = get_username();
    $timingPath = "/u/${username}/$opt_p4ws/projects/$opt_projSPEC";
    $timingPath =~ s/\/[^\/]+$//;
    $timingPath .= '/latest/design/timing/';
    if( ! -e $timingPath ){
        fatal_error( "timing path does not exist:\n\t $timingPath \n" );
    }
    elsif( ! -e $pininfoPath ){
        fatal_error( "pininfo path does not exist:\n\t $pininfoPath \n" );
    }

    ## welcome
    iprint("Attempting to hack timing LIB areas in $timingPath"
          ." from pininfo files in $pininfoPath\n");

    ## set timing/pininfo area files
    $timingAreaFile  = &cwd()."/$PROGRAM_NAME.timing";
    $pininfoAreaFile = &cwd()."/$PROGRAM_NAME.pininfo";

    ## generate area files
    &iprint("  Grep'ing area from pininfo files (VSS==primary_ground entry)\n");
    $cmd = "cd $pininfoPath; grep primary_ground * | "
          ."perl -n -e 'if(/^(\\w+).csv\\s*\\:\\s*VSS.*primary_ground,.*,([\\d\\.]+),([\\d\\.]+)\$/){print \"\$1,\".(\$2*\$3).\"\\n\";}' > $pininfoAreaFile";
    iprint("\$ $cmd\n");
    run_system_cmd($cmd, $VERBOSITY) unless( $TESTMODE) ;
    iprint("  Grep'ing area from LIB files \n");
    $cmd = "cd $timingPath; grep 'area :' nt/*/lib*/*.lib sis/*/lib*/*.lib |"
          ." perl -n -e 'if(/^((nt\\/|sis\\/)(\\w+)\\/[^\\:\\s]+)\\s*\\:\\s*area\\s*\\:\\s*([\\d\\.e\\+\\-]+)/){print \"\$3,\$1,\$4\\n\"}' > $timingAreaFile";
    iprint("\$ $cmd\n");
    run_system_cmd($cmd, $VERBOSITY) unless( $TESTMODE) ;

    ## check that timing area file is not empty
    if( -z $timingAreaFile ){
        fatal_error("The timing area file $timingAreaFile is empty, which probably "
              ."indicates that the timing files do not exists\n");
    }elsif(-z $pininfoAreaFile){
        fatal_error("The pininfo area file $pininfoAreaFile is empty, which probably"
              ." indicates that the pininfo files do not exists\n");
    }

    ## read pininfo file areas
    my @lines = read_file($pininfoAreaFile);
    my $lineNumber=0;
    foreach my $line ( @lines ){
        $lineNumber++;
        if( $line =~ m/^(\w+),(\d+\.\d+)$/){
            $pininfoArea{$1} = $2;
        }else{
            fatal_error("pininfo area file lines are expected to be '<macro>,<area>'"
                  ." but $pininfoAreaFile:$lineNumber is $line\n");
        }
    }

    ## read timing file areas
    @lines = read_file($timingAreaFile);
    $lineNumber = 0;
    foreach my $line ( @lines ){
        $lineNumber++;
        if( $line =~ m/^(\w+),([\w\/\.]+),([\d\.e\+\-]+)$/ ){
            $macro   = $1;
            $libFile = $2;
            $area    = $3;
            ## if the LIB file has the wrong area, fix it
            if(!exists $pininfoArea{$macro}){
                wprint("WARNING: missing pininfo area entry for $macro macro for $libFile libFile. Skipping...\n");
            }elsif($pininfoArea{$macro} != $area){
                logger( "  Fixing the area of $libFile LIB file from $area to $pininfoArea{$macro}...\n");
                $area =~ s/\+/\\\+/;
                $area =~ s/\=/\\\-/;
                $cmd  = "perl -i -pe 's/^(\\s*area\\s*\\:)\\s*$area(\\s*\\;?\\s*)\$/\$1 "
                       ."$pininfoArea{$macro}\$2/' $timingPath/$libFile";
                if( $TESTMODE ){
                    logger("TESTMODE: \$ $cmd\n");
                }else{
                    logger("\$ $cmd\n");
                    run_system_cmd($cmd, $VERBOSITY);
                }

                $macrosFixed{$macro}++;
            }
        }else{
            fatal_error("timing area file lines are expected to be '<macro>,<LIB file>,<area>'"
                  ." but $timingAreaFile:$lineNumber is $line\n");
        }
    }

    ## summarize macros fixed
    if( keys %macrosFixed ){
        iprint("\nSummary of macros with fixed areas:\n");
        foreach my $mymacro (sort keys %macrosFixed){
            iprint("  $mymacro: $macrosFixed{$mymacro}\n");
        }
    }
    else{
        iprint("\nNo macros needed areas fixed\n");
    }

    ## All done
    iprint("\nAll done.\n");
    exit(0);  # 0 means success
} # end of Main()

#------------------------------------------------------------------------------
sub process_cmd_line_args() {
    ## get specified args
    my($opt_p4ws,     $opt_nocosim, $opt_macros, $opt_dryrun, $opt_hspice, $opt_ibis,
       $opt_projSPEC, $opt_nousage, $opt_help,   $opt_debug,  $opt_verbosity);

    my $success = GetOptions(
       "help!"       => \$opt_help,
       "p=s"         => \$opt_projSPEC,
       "p4ws=s"      => \$opt_p4ws,
       "dryrun!"     => \$opt_dryrun,
       "nousage"     => \$opt_nousage,
       "debug=i"     => \$opt_debug,
       "verbosity=i" => \$opt_verbosity,
    );

    $main::VERBOSITY = $opt_verbosity if( defined $opt_verbosity );
    $main::DEBUG     = $opt_debug     if( defined $opt_debug     );
    $main::TESTMODE  = 1              if( defined $opt_dryrun    );

    ## quit with usage message, if usage not satisfied
    &usage(0) if $opt_help;
    &usage(1) unless( $success );
    &usage(1) unless( defined $opt_projSPEC );

    return( $opt_projSPEC, $opt_nousage, $opt_p4ws );
}


#------------------------------------------------------------------------------
sub usage($){
    my $exit_stat = shift;
    my $username = get_username();

    print << "EOP" ;
Description:
  A script to hack LIB files area on the p4 latest timing disk
    /u/${username}/p4_ws/projects/<project_type>/<project>/latest/design/timing/nt|sis/<macro>/lib/<macro>_<metal_statck>_<corner>.lib 
    /u/${username}/p4_ws/projects/<project_type>/<project>/latest/design/timing/nt|sis/<macro>/lib_pg/<macro>_<metal_statck>_<corner>_pg.lib 
  From the pin info files (primary ground entry)
    /remote/cad-rep/projects/<project_type>/<project>/<CD_rel>/design/pininfo/latest/<macro>.csv

  Assumes that PHYV release has fixed pininfo file area, which may not have been updated in timing LIBs

USAGE : $PROGRAM_NAME [options] -p <projSPEC>

------------------------------------
Required Args:
------------------------------------
-p  <projSPEC>    project SPEC (i.e. <project_type>/<project>/<CD_rel> )


------------------------------------
Optional Args:
------------------------------------
-help             print this screen
-debug     #      Set debug level
-verbosity #      Set verbosity level
-testmode         Does not allow your environment to get changed
-nousage          Don't report usage statistics

Assumptions:
- Pin info file entry VSS==primary_ground has the correct area
- Pin info pin field is the first column
- Pin info xdim,ydim fields are the last columns

EOP
    exit($exit_stat) ;
}

