#!/depot/tcl8.6.3/bin/tclsh8.6
##!/depot/tk8.6.1/bin/wish
# nolint Main
# nolint utils__script_usage_statistics
#
package require tcltest 2.0
namespace import -force ::tcltest::*

package require try         ;# Tcllib.
package require cmdline 1.5 ;# First version with proper error-codes.
package require fileutil

set DEBUG      0
set VERBOSITY  0
set STDOUT_LOG ""
set AUTHOR     "Ahmed Hesham"
set RealBin [file dirname [file normalize [info script]] ]
set RealScript [file tail [file normalize [info script]] ]

# source the SUT (script under test) to load in all of it's procs
# Setting global DDR_DA_UNIT_TEST so the script we are sourcing won't actually
# run the script; it should return before anything actually runs.
set DDR_DA_UNIT_TEST 1
set DA_RUNNING_UNIT_TESTS 1
source $RealBin/../../bin/alphaHLDepotExportRtl.tcl

::tcltest::verbose bpse
::tcltest::debug 2


#######################################################################
# Create your tests here
#######################################################################

test alphaHLDepotExportRtl-adjust_rtldir_path_t01 { Test: normal mode } \
    -body { 
        set dir [makeDirectory rtl]

        set ret [adjust_rtldir_path ./ 0 maxCl]

        removeDirectory $dir
        return $ret
    } \
    -result {./rtl/clmaxCl} \
    -output {}

test alphaHLDepotExportRtl-adjust_rtldir_path_t02 { Test: functional test mode } \
    -body { 
        set dir [makeDirectory test-rtl]

        set ret [adjust_rtldir_path ./ 1 maxCl]

        removeDirectory $dir
        return $ret
    } \
    -result {./test-rtl/clmaxCl} \
    -output {}

test alphaHLDepotExportRtl-adjust_rtldir_path_t03 { Test: Not writable } \
    -body { 
        rename exit real_exit
        proc exit {{val 0}} {}

        set ret [adjust_rtldir_path ./ 1 maxCl]

        rename exit {}
        rename real_exit exit
        return $ret
    } \
    -result {./test-rtl/clmaxCl} \
    -output "-E-  RTL directory is not writeable: ./test-rtl \n"

cleanupTests

# THIS CODE WORKS: 11/10/2022 5:25pm - ljames
# How to do the same thing above in the test?
#
# set release 1
# addPincheckInfo $release "macro" "info" 
# 
# if { ![dict exists $::pincheckInfo $release] } { 
#     puts "FAILED"
# } else {
#     puts "PASSED"
# }

puts "Done"

