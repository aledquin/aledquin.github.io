#!/depot/perl-5.14.2/bin/perl
#
# Usage:
#     p4_compare_dir1_to_dir2 [ dirPath1 ]  [ dirPath2 ]
#
# Author: James Laderoute
# Created: 11/22/2022
#
# Modifications:
# 001   James Laderoute 11/22/2022
#       created this script
#-
use strict;
use warnings;

use File::Find;
use Digest::MD5 qw(md5);
use Pod::Usage;
use File::Basename ;  # for filename parsing
use Cwd;              # for getpwuid
use English;          # English names in place of punctuation variables
use Getopt::Long;     # For command line parsing
use Carp  qw(cluck confess croak );
use FindBin qw( $RealBin $RealScript );


use lib "$RealBin/lib";
use Util::CommonHeader;
use Util::Misc;
use Util::Messaging;

#--------------------------------------------------------------------#
our $STDOUT_LOG  = undef;     # undef       : Log msg to var => OFF
#our $STDOUT_LOG   = EMPTY_STR; # Empty String: Log msg to var => ON
our $DEBUG        = NONE;
our $VERBOSITY    = NONE;
our $PROGRAM_NAME = $RealScript;
our $VERSION      = '2022.12';
#--------------------------------------------------------------------#



my $USERNAME = getlogin() || getpwuid($<) || $ENV{'USER'} ;
my $HOME = "/u/${USERNAME}/";
my @DIRS1 = ();
my @DIRS2 = ();

sub Main() {
    my %opt_defaults = ( 'usage' => 1 );
    my @required = qw/REQUIRED_ARGUMENTS/;
    my @filenames = ();
    my @myoptions = ( 'debug:i', 'verbosity:i', 'usage!', 'man', 'help' );
    my %returned_options = ();
    
    my $error = script_process_cmd_line_args( 
        \@myoptions, 
        \%returned_options, 
        \%opt_defaults, 
        \@required, 
        \@filenames
        );
    if ( exists($returned_options{'man'}) ){
        pod2usage( {
             -exitval => 0,
             -verbose => 2 });
    }
    if ( $returned_options{'usage'} ){
        &utils__script_usage_statistics($PROGRAM_NAME, $VERSION);
    }
    my $beta_dir1 = '';
    my $bin_dir2 = '';
    my $n_filenames = @filenames;
    if ( $n_filenames != 0 ) {
        $beta_dir1 = shift @filenames;
        $bin_dir2  = shift @filenames;
    }

    if ( ! $beta_dir1 ) {
      print("-F- you must specify dir1 and dir2!\n");
      exit(1);
    }
    if ( ! $bin_dir2 ) {
      print("-F- you must specify dir2!\n");
      exit(1);
    }
      
    find(\&process_file_for_dir1, ( $beta_dir1 ));
    find(\&process_file_for_dir2, ( $bin_dir2 ));

    my %same;
    foreach my $file1_beta_path ( @DIRS1 ) {
        next unless ( -f $file1_beta_path);
        next if ( $file1_beta_path =~ m|/tdata/|);
        next if ( $file1_beta_path =~ m|/t/|);
        my $beta_fname = &basename($file1_beta_path);
        $same{"$beta_fname"} = $file1_beta_path;
    }

    my %bin_hash; 

    foreach my $file2_bin_path ( @DIRS2 ) {
        next unless ( -f $file2_bin_path);
        next if ( $file2_bin_path =~ m|/tdata/|);
        next if ( $file2_bin_path =~ m|/t/|);
        #next if ( $file2_bin_path =~ m|/dev/|);
        #next if ( $file2_bin_path =~ m|/beta/|);

        my $bin_fname = &basename($file2_bin_path);
        $bin_hash{"$bin_fname"} = $file2_bin_path;

        if ( exists( $same{"$bin_fname"} ) )
        {
            my $date_compare = "";
            my $file1_beta_path = $same{"$bin_fname"};
            open(FH1, '<', $file1_beta_path) || die;
            my $md5_ctx1 = Digest::MD5->new;
            $md5_ctx1->addfile( *FH1);
            my $v1 = $md5_ctx1->hexdigest;
            close(FH1);

            open(FH2, '<', $file2_bin_path) || die;
            my $md5_ctx2 = Digest::MD5->new;
            $md5_ctx2->addfile( *FH2 );
            my $v2 = $md5_ctx2->hexdigest;
            close(FH2);

            my $d1_beta='?';
            my $d2_bin='?';
            my $stat_ret = &isolder($file2_bin_path, $file1_beta_path, 
                \$d2_bin, \$d1_beta);
            $date_compare = " older (dir1:$d1_beta dir2:$d2_bin)"    if ( -1 == $stat_ret );
            $date_compare = " newer (dir1:$d1_beta dir2:$d2_bin)"    if (  1 == $stat_ret );
            $date_compare = " same_age (dir1:$d1_beta dir2:$d2_bin)" if (  0 == $stat_ret );

            if ( $v1 eq $v2 ) {
                print("Same: $file2_bin_path ${date_compare}\n");
            } else {
                print("Diff: $file2_bin_path ${date_compare}\n");
            }
        }else{
            print("ExtraInDir2: $file2_bin_path\n");
        }
    }

    foreach my $file1_filename ( keys(%same)) {
        if ( ! exists( $bin_hash{"$file1_filename"})) {
            my $filename = $same{"$file1_filename"};
            if ( defined($filename) ) {
                print("ExtraInDir1: $filename\n");
            }

        }

    }

    exit(0);
}

use File::stat;
sub isolder($$$$) {
    my $f1 = shift;
    my $f2 = shift;
    my $ref_date1 = shift;
    my $ref_date2 = shift;

    my $t1 = stat($f1)->mtime; # seconds
    my $t2 = stat($f2)->mtime; # seconds

    $$ref_date1 = localtime( $t1 );
    $$ref_date2 = localtime( $t2 );
    
    return -1 if ( $t1 < $t2 );
    return 1  if ( $t1 > $t2);
    return 0; # same timestamp
}

sub process_file_for_dir1 {
    push( @DIRS1, $File::Find::name ); # this is the full filepath
}

sub process_file_for_dir2 {
    push( @DIRS2, $File::Find::name );
}

#------------------------------------------------------------------------------
sub script_process_cmd_line_args($$$$$){
    my $aref_args      = shift; # the options to be looked for
    my $href_options   = shift; # what the user selected gets put in here
    my $href_defaults  = shift; # if you did not specify a value then defaults
    my $aref_required  = shift; # list of required arguments
    my $aref_filenames = shift; # list of args not specified

    my $get_status = GetOptions( $href_options, @$aref_args);
    if ( ! $get_status || $href_options->{'help'} ){
        pod2usage(1);
    }

    foreach my $fname ( @ARGV ) {
        push( @$aref_filenames , $fname);
    }

    #
    # Make sure there are no missing REQUIRED arguments
    #
    my $have_required = 1;
    foreach my $argname ( @{$aref_required} ){
        next if $argname eq "REQUIRED_ARGUMENTS";
        if (   ! exists($href_options->{"$argname"} ) 
            || ! defined($href_options->{"$argname"} ) ){
            $have_required = 0;
            eprint( "Missing Required Argument -$argname\n" );
        }
    }
    if ( ! $have_required ){
        pod2usage(0);
        return(0);
    }

    #
    # Set defaults
    #
    if ( $href_defaults) {
        foreach my $argname ( keys( %{$href_defaults} ) ){
            if ( ! exists( $href_options->{"$argname"} ) ){
                $href_options->{"$argname"} = $href_defaults->{"$argname"};
            }
        }
    }

   # VERBOSITY will be used to control the intensity level of 
   #     messages reported to the user while running.
   my $opt_verbosity = $href_options->{'verbosity'};
   if( defined $opt_verbosity ){
      if( $opt_verbosity =~ m/^\d+$/ ){  
         $main::VERBOSITY = $opt_verbosity;
      }else{
         eprint( "Ignoring option '-v': arg must be an integer\n" );
      }
   }

   # decide whether to alter DEBUG variable
   # '--debug' indicates DEBUG value ... set based on user input
   # Patrick : modified in order to specify a value >0 but <1
   my $opt_debug = $href_options->{'debug'};
   if( defined $opt_debug ){
      if( $opt_debug =~ m/^\d+\.*\d*$/ ){
         $main::DEBUG = $opt_debug;
      }else{
         eprint( "Ignoring option '-d': arg must be an integer\n" );
      }
   }

   return(0); ## success is 0

}


Main();


__END__


=head1 NAME

 p4_compare_dir1_to_dir2

=head1 VERSION

 2022ww12

=head1 SYNOPSIS

 p4_compare_dir1_to_dir2 [options] [dir1Path dir2Path]

 Options:
   -help            brief help message
   -man             full documentation

 This script wil compare dir1 against dir2
 It will report which files are exactly the same and which are different
 and which are missing from the other folder.

=head1 OPTIONS

=over 8

=item B<-debug number>

Set a debug level, in order to control debug messages.

=item B<-verbose number>

Set the verbosity level on messages.

=item B<-help>

Print a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

 This script will compare dir1 against dir2. 
 It will report which files are exactly the same and which are different
 and which are missing from the other folder.

=head1 RETURN VALUE

Returns 0 if there are no warnings or errors
Returns 1 if there are warnings or errors

=cut
