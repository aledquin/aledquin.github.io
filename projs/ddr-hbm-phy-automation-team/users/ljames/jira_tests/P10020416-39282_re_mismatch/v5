#!/depot/tcl8.6.3/bin/tclsh8.6
#!/depot/tk8.6.1/bin/wish

#proc addItemUnique { myArray myIndex item } {
#
#    if [info exists $myArray($myIndex)] {
#	set x [set $myarray($myIndex)]
#	if {[lsearch -exact $x $item] == -1} { lappend $x $item }
#    } else {set x [list $item]}
#    set $myArray($myIndex) $x
#}
#

set thisScript [file normalize [info script]]

proc showUsage {} {
    puts "\nUsage:  alphaHLDepotExportRtl.tcl <projID>"
    puts "\n\tprojID = \"productName/projectName/projectRelease\""
    puts "\n\tExample:"
    puts "\t\talphaHLDepotExportRtl.tcl lpddr4xm/d551-lpddr4xm-tsmc16ffc18/rel1.00"
}


proc checkRequiredFile {fileName} {
    if [file exists $fileName] {return 1}
    puts "Error:  Missing required file \"$fileName\""
    return 0
}

proc checkRequiredVariable {varName} {
    global $varName

    if [info exists $varName] {return 1}
    puts "Error:  Variable \"$varName\" is undefined"
    return 0

}

proc processProject {projPath} {

    set projHome "$::env(MSIP_PROJ_ROOT)/$projPath"
    set projEnv "$projHome/cad/project.env"
    if {![file exists $projEnv]} {
	puts "Error:  Projects \"$projPath\" does not exist"
	exit
    }
    
    set t [split $projPath "/"]
    set ::projectType [lindex $t 0]
    set ::projectName [lindex $t 1]
    set ::projectRelease [lindex $t 2]

    set legalRelease "$projHome/design/legalRelease.txt"
    
    set OK true
    if {![checkRequiredFile $legalRelease]} {set OK false}
    if {!$OK} {
	puts "Aborting on missing file(s)"
	exit
    }
        
    #puts "$macroList"
    source $legalRelease
    if [info exists p4_release_root] {
	foreach xx $p4_release_root {lappend ::releaseRoot "//depot/$xx"}
    }
    if [info exists rel] {
	set ::ipReleaseName $rel
	set ::ipReleaseNameVC $rel
    }
    if [info exists vcrel] {set ::ipReleaseNameVC $vcrel}
    if [info exists ferel] {set ::ferelName $ferel}
    if [info exists process] {set ::processName $process}
    if [info exists metal_stack] {set ::metalStack $metal_stack}
    if [info exists releaseMailDist] {set ::releaseMailDist $releaseMailDist}
    if [info exists releaseIgnoreMacro] {set ::releaseIgnoreMacro $releaseIgnoreMacro}
}

set i 0
set nArg [llength $argv]
if {($nArg == 0) || ($nArg > 1)} {
    showUsage
    exit
}

processProject [lindex $argv 0]

##  Check the required variables 
set OK true
if {![checkRequiredVariable projectType]} {set OK false}
if {![checkRequiredVariable projectName]} {set OK false}
if {![checkRequiredVariable projectRelease]} {set OK false}
if {![checkRequiredVariable ipReleaseName]} {set OK false}
if {![checkRequiredVariable ipReleaseNameVC]} {set OK false}
if {![checkRequiredVariable processName]} {set OK false}
#if {![checkRequiredVariable metalStack]} {set OK false}
if {![checkRequiredVariable releaseRoot]} {set OK false}
if {!$OK} {
    puts "Aborting on missing required variable(s)"
    exit
}

set home [pwd]

if {[info exists ferelName]} { 
    set root "[lindex $releaseRoot 0]/fe/rel/$ferelName"
} else { set root "[lindex $releaseRoot 0]/fe/rel/$ipReleaseNameVC" }


puts "Info:  Exporting from $root/..."
set o [split [exec p4 files -e $root/...] "\n"]

set fileList {}
set err 0
puts $o
foreach f $o {
    #puts "\"$f\""
    if [regexp {^(\S+)#(\d+) .* (\d+) \([0-9a-z_\+]+\)} $f dummy depotFile ver changelist] {
#	puts "\t$depotFile"
#	puts "\t$ver"
#	puts "\t$changelist"
	set changelists($changelist) 1
	lappend fileList $depotFile
    } else {
	puts "Error:  Failed to match $f"
	set err 1
    }

    set maxCL 0
    foreach cl [array names changelists] {
	if {$cl > $maxCL} {set maxCL $cl}
    }
}

if $err exit

puts "Info:  Changelists: [array names changelists], using $maxCL"
set rtlDir "$env(MSIP_PROJ_ROOT)/$projectType/$projectName/$projectRelease/design/rtl"
#set rtlDir "./rtl/cl$maxCL"
if {![file writable $rtlDir]} {
    puts "Error:  $rtlDir is not writable"
    exit
}
append rtlDir "/cl$maxCL"
puts "Info:  Exporting files to $rtlDir"
if {[file exists $rtlDir]} {
    puts "Warning: $rtlDir exists; flushing"
    set files [glob -nocomplain "$rtlDir/*"]
    foreach f $files {
	file delete -force $f
    }
} else {
    file mkdir $rtlDir
}

puts "Info:  Exporting rtl"
set n 0
foreach f $fileList {
    set t [split $f "/"]
    set fileName "$rtlDir/[lindex $t end]"
    puts "\t$f"
    exec p4 print -o $fileName $f
    incr n
}
cd $rtlDir
cd ..
if [file exists $ipReleaseName] {file delete $ipReleaseName}
file link -symbolic $ipReleaseName cl$maxCL
cd $home

puts "Info:  $n files exported"

catch { exec /remote/cad-rep/msip/tools/bin/msip_get_usage_info --tool_name ddr-da-alphaHLDepotExportRtl \
            --stage main --category ude_ext_1 \
            --tool_path NA --tool_version 2022ww15 \
            & } sniff_msg


